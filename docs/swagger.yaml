basePath: /
definitions:
  auth_models.LoginReq:
    properties:
      email:
        example: example@example.com
        type: string
      password:
        example: P@ssw0rd
        type: string
    required:
    - email
    - password
    type: object
  auth_models.RefreshReq:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth_models.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6Ikp..
        type: string
      ref_id:
        example: b2a8f4e5-9e3b-4c2b-9e0f-7b2c1a6d1f33
        type: string
      refresh_token:
        example: 0b83305f-75b2-4e89-a444-70da68f84d4f.0224f190-0f9a-46a4-a0fc-521fcc07e2ee..
        type: string
    type: object
  entities.Role:
    properties:
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      updated_at:
        type: string
    type: object
  entities.User:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      role:
        $ref: '#/definitions/entities.Role'
      role_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  user_models.CreateUserRequest:
    properties:
      email:
        example: example@example.com
        type: string
      is_active:
        type: boolean
      name:
        example: Soda Pop
        maxLength: 120
        type: string
      password:
        example: P@ssw0rd
        type: string
      role_id:
        example: a1bf3d66-e4ae-4d73-89c6-917f0f301003
        type: string
    required:
    - email
    - name
    - password
    - role_id
    type: object
  user_models.CreateUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      role_id:
        type: string
    type: object
info:
  contact: {}
  description: API for Interview Tracker
  title: Interview Tracker API
  version: "1.0"
paths:
  /interview-tracker/health:
    get:
      description: Returns success if the service is healthy
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
      summary: Health check
      tags:
      - health
  /interview-tracker/internal/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and issue access/refresh tokens (JWT access token
        has only sub/exp/iat/iss)
      parameters:
      - description: login JSON
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth_models.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/auth_models.TokenResponse'
      summary: Login
      tags:
      - auth
  /interview-tracker/internal/v1/auth/logout:
    post:
      description: Revoke current session using access token (refID is taken from
        JWT `sub`)
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: logout failed
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - auth
  /interview-tracker/internal/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Rotate refresh token and issue a new access token
      parameters:
      - description: refresh JSON
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth_models.RefreshReq'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/auth_models.TokenResponse'
      summary: Refresh token
      tags:
      - auth
  /interview-tracker/internal/v1/users/create:
    post:
      consumes:
      - application/json
      description: Create user for
      parameters:
      - description: user create JSON
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user_models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success response
          schema:
            $ref: '#/definitions/user_models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create user
      tags:
      - users
  /interview-tracker/internal/v1/users/details/{userId}:
    get:
      consumes:
      - application/json
      description: Get user By ID
      parameters:
      - default: 888f2c6b-cc1a-4e94-bd6e-d8ba0ac36fc3
        description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/entities.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user By ID
      tags:
      - users
  /interview-tracker/internal/v1/users/role-list:
    get:
      consumes:
      - application/json
      description: Get role
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/entities.Role'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get role
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
